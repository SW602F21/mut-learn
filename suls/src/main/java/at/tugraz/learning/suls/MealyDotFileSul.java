/*******************************************************************************
 * mut-learn
 * Copyright (C) 2016 TU Graz
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *******************************************************************************/
package at.tugraz.learning.suls;

import de.learnlib.api.SULException;
import de.learnlib.simulator.sul.MealySimulatorSUL;
import net.automatalib.automata.transout.MealyMachine;
import net.automatalib.words.Alphabet;
import net.automatalib.words.impl.FastAlphabet;
import net.automatalib.words.impl.Symbol;

/**
 * A simulated Mealy machine read from a GraphViz-dot-File.
 * It is assumed to be given in the format generated by LearnLib/AutomataLib. 
 * 
 * @author Martin Tappler
 *
 */
public class MealyDotFileSul implements SULWithAlphabet<Symbol, String> {
	private Alphabet<Symbol> alphabet = new FastAlphabet<>();
	private MealySimulatorSUL<Symbol, String> simulatorSul = null;
	private MealyMachine<?, Symbol, ?, String> mealy = null;
	public MealyDotFileSul(String dotFileName) {
		mealy = parse(dotFileName);
		simulatorSul = new MealySimulatorSUL<>(getMealy());
	}
	private MealyMachine<?,Symbol,?,String> parse(String dotFileName) {
		DotMealyMachineParser parser = new DotMealyMachineParser();
		MealyMachine<?, Symbol, ?, String> parseResult = parser.parse(dotFileName);
		alphabet.addAll(parser.getAlphabet());
		return parseResult;
	}
	@Override
	public void post() {
		simulatorSul.post();
	}

	@Override
	public void pre() {
		simulatorSul.pre();
	}

	@Override
	public String step(Symbol input) throws SULException {
		return simulatorSul.step(input);
	}

	@Override
	public Alphabet<Symbol> getAlphabet() {
		return alphabet;
	}
	public MealyMachine<?, Symbol, ?, String> getMealy() {
		return mealy;
	}
}
